#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 2                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 2; Exercise #1
#submitted by: Laura
#updated by:
#verified by: *needs review*

SELECT product_code, product_name, list_price, discount_percent
  FROM products;
  
SELECT product_code, product_name, list_price, discount_percent
  FROM products
 ORDER BY list_price;  
 
#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #2
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT CONCAT(last_name, ', ', first_name) AS full_name
  FROM customers
 WHERE LEFT(last_name, 1) BETWEEN 'M' and 'Z'
 ORDER BY last_name;
 
#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #3
#submitted by: Laura
#updated by:
#verified by: *needs review*

SELECT product_name, list_price, date_added
  FROM products
 WHERE list_price BETWEEN 500 AND 2000
 ORDER BY date_added DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #4
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #5
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #6
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #7
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #8
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 3                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 3; Exercise #1
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.category_name, p.product_name, p.list_price
FROM categories c JOIN products p
ON c.category_id = p.category_id
ORDER BY c.category_name, p.product_name ASC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #2
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
FROM customers c JOIN addresses a 
ON c.customer_id = a.customer_id
WHERE email_address = "allan.sherwood@yahoo.com";

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #3
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
FROM customers c JOIN addresses a 
ON c.customer_id = a.customer_id
WHERE c.shipping_address_id = a.address_id;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #4
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.last_name, c.first_name, o.order_date, p.product_name, oi.item_price, oi.discount_amount, oi.quantity
FROM customers c JOIN orders o 
ON c.customer_id = o.customer_id
JOIN order_items oi 
ON o.order_id = oi.order_id
JOIN products p 
ON oi.product_id = p.product_id
ORDER BY c.last_name, o.order_date, p.product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #5
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT a.product_name, a.list_price
FROM products a JOIN products b
ON a.list_price = b.list_price
WHERE NOT a.product_code = b.product_code AND a.list_price = b.list_price
ORDER BY a.product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #6
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.category_name, p.product_id
FROM categories c LEFT JOIN products p
ON c.category_id = p.category_id
WHERE product_id IS NULL;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #7
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 4                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 4; Exercise #1
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #2
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #3
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #4
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #5
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #6
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #7
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #8
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #9
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #10
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 5                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 5; Exercise #1
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #2
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.category_name, count(p.product_id), max(p.list_price)
FROM categories c JOIN products p
ON c.category_id = p.category_id
GROUP BY c.category_name
ORDER BY count(p.product_id) DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #3
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.email_address, 
(sum(oi.item_price) * oi.quantity) AS total_price, 
(sum(oi.discount_amount) * oi.quantity) AS total_discount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY o.customer_id
ORDER BY total_price DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #4
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.email_address, 
count(o.order_id) AS number_of_orders, 
((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY o.customer_id
HAVING count(o.order_id) > 1
ORDER BY total_amount DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #5
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.email_address, 
count(o.order_id) AS number_of_orders, 
((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
where oi.item_price > 400
GROUP BY o.customer_id
ORDER BY total_amount DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #6
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #7
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT c.email_address, count(oi.order_id) AS number_of_products
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY c.email_address
HAVING number_of_products > 1
ORDER BY c.email_address ASC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #9
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #10
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #11
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 6                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 6; Exercise #1
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT category_name
FROM categories
WHERE category_id IN(
SELECT category_id 
FROM products);

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #2
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT product_name, list_price
FROM products
HAVING list_price > (
SELECT AVG(list_price) 
FROM products)
ORDER BY list_price DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #3
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT category_name
FROM categories
WHERE NOT EXISTS(
SELECT * 
FROM products 
WHERE products.category_id = categories.category_id);

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #4
#submitted by: Jared
#updated by:
#verified by: *needs review*

#Inner Query
SELECT c.email_address, oi.order_id, 
(oi.item_price - oi.discount_amount) AS order_total
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON oi.order_id = o.order_id
GROUP BY email_address, order_id;

#Complete Query
SELECT email_address, MAX(order_total)
FROM (SELECT c.email_address, oi.order_id, 
(oi.item_price - oi.discount_amount) AS order_total
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON oi.order_id = o.order_id
GROUP BY email_address, order_id) as newTable
GROUP BY email_address
ORDER BY order_total DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #5
#submitted by: Jared
#updated by:
#verified by: *needs review*

SELECT product_name, discount_percent
FROM products
WHERE discount_percent IN(
SELECT discount_percent
FROM products
GROUP BY discount_percent
HAVING count(discount_percent) = 1)
ORDER BY product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #6
#submitted by: 
#updated by:
#verified by: *needs review*



#------------------------------------------------------------------------
