#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 2                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 2; Exercise #1
#submitted by: Laura
#updated by:Jared
#verified by: Jared

SELECT product_code, product_name, list_price, discount_percent
  FROM products;
  
SELECT product_code, product_name, list_price, discount_percent
  FROM products
 ORDER BY list_price DESC;  
 
#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #2
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT CONCAT(last_name, ', ', first_name) AS full_name
  FROM customers
 WHERE LEFT(last_name, 1) BETWEEN 'M' and 'Z'
 ORDER BY last_name;
 
#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #3
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT product_name, list_price, date_added
  FROM products
 WHERE list_price BETWEEN 500 AND 2000
 ORDER BY date_added DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #4
#submitted by: Laura
#updated by:
#verified by: *needs review*

SELECT product_name, list_price, discount_percent
     , ROUND(list_price * (discount_percent/100), 2)               AS discount_amount
     , ROUND(list_price - (list_price * discount_percent/100), 2)  AS discount_price
  FROM products
 ORDER BY discount_price DESC LIMIT 5;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #5
#submitted by: Laura
#updated by:
#verified by: *needs review*

SELECT item_id, item_price, discount_amount, quantity
     , item_price * quantity       AS price_total
	 , discount_amount * quantity  AS discount_total
     , (item_price - discount_amount) * quantity  AS item_total
  FROM order_items
 WHERE (item_price - discount_amount) * quantity > 500
 ORDER BY item_total DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #6
#submitted by:Laura
#updated by:
#verified by: *needs review*

SELECT order_id, order_date, ship_date
  FROM orders
 WHERE ship_date IS NULL;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #7
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT NOW() AS today_unformatted,
DATE_FORMAT(NOW(), '%d-%b-%Y')  AS today_formatted; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #8
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT 100                  AS price
     , .07                  AS tax_rate
     , (100 * .07)          AS tax_amount
     , (100 + (100 * .07))  AS total;

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 3                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 3; Exercise #1
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.category_name, p.product_name, p.list_price
FROM categories c JOIN products p
ON c.category_id = p.category_id
ORDER BY c.category_name, p.product_name ASC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #2
#submitted by: Jared
#updated by:
#verified by: Laura -- I added 'DISTINCT' because it specified return on row, I tested both and it doesn't
#                      seem to make a difference in this data set, but should we include it anyway?
#                      also, could add alias to email field, not necessary I know, but for clarity in reading

SELECT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
FROM customers c JOIN addresses a 
ON c.customer_id = a.customer_id
WHERE email_address = "allan.sherwood@yahoo.com";

 SELECT DISTINCT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
   FROM customers c
   JOIN addresses a
     ON a.customer_id = c.customer_id
  WHERE c.email_address = 'allan.sherwood@yahoo.com';

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #3
#submitted by: Jared
#updated by:
#verified by: Laura --I added 'DISTINCT' here as well, for the same reason as above. see logic below. thoughts?

SELECT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
FROM customers c JOIN addresses a 
ON c.customer_id = a.customer_id
WHERE c.shipping_address_id = a.address_id;

SELECT DISTINCT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
  FROM customers c
  JOIN addresses a
    ON a.customer_id = c.customer_id
 WHERE c.shipping_address_id = c.billing_address_id;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #4
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.last_name, c.first_name, o.order_date, p.product_name, oi.item_price, oi.discount_amount, oi.quantity
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
  JOIN products p
    ON p.product_id = oi.product_id
 ORDER BY c.last_name, o.order_date, p.product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #5
#submitted by: Jared
#updated by:
#verified by: Laura -- different approach, same results. see below

SELECT a.product_name, a.list_price
FROM products a JOIN products b
ON a.list_price = b.list_price
WHERE NOT a.product_code = b.product_code AND a.list_price = b.list_price
ORDER BY a.product_name;

SELECT p.product_name, p.list_price 
  FROM products p
  JOIN products p2
    ON p.product_id <> p2.product_id 
   AND p.list_price = p2.list_price
 ORDER BY p.product_name; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #6
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.category_name, p.product_id
FROM categories c LEFT JOIN products p
ON c.category_id = p.category_id
WHERE product_id IS NULL;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #7
#submitted by: Laura
#updated by:
#verified by: *needs review*

SELECT 'SHIPPED' AS ship_status
     , order_id
     , order_date
  FROM orders
 WHERE ship_date is not null
 UNION
 SELECT 'NOT SHIPPED' AS ship_status
     , order_id
     , order_date
  FROM orders
 WHERE ship_date is null;

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 4                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 4; Exercise #1
#submitted by: Laura
#updated by:
#verified by: *needs review*

INSERT INTO categories VALUES (NULL, 'Brass');

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #2
#submitted by: Laura
#updated by:
#verified by: *needs review*

UPDATE categories
  SET category_name = 'Woodwinds'
WHERE category_id = 5;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #3
#submitted by: Laura
#updated by:
#verified by: *needs review*

INSERT INTO products (product_id, category_id, product_code, product_name, description, list_price, discount_percent, date_added)
VALUES (NULL, 4, 'dgx_640', 'Yamaha DGX 640 88-Key Digital Piano', 'Long description to come.', 799.99, 0, NOW() );
 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #4
#submitted by: Laura
#updated by:
#verified by: *needs review*

INSERT INTO products (product_id, category_id, product_code, product_name, description, list_price, discount_percent, date_added)
VALUES (NULL, 4, 'dgx_640', 'Yamaha DGX 640 88-Key Digital Piano', 'Long description to come.', 799.99, 0, NOW() );

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #5
#submitted by: Laura
#updated by:
#verified by: *needs review*

UPDATE products
   SET discount_percent = 35
 WHERE product_id = 11;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #6
#submitted by: Laura
#updated by:
#verified by: *needs review*

DELETE FROM products WHERE category_id = 4;
DELETE FROM categories WHERE category_id = 4;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #7
#submitted by: Laura
#updated by:
#verified by: *needs review*

/*
is this email_address supposed to be 'rick@raven.com" rather than ric@raven.com?
it seems that way based on exercise #8, but maybe that is part of the 'test'?
*/

INSERT INTO customers (customer_id, email_address, password, first_name, last_name)
VALUES (NULL, 'ric@raven.com', '', 'Rick', 'Raven');

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #8
#submitted by: Laura
#updated by:
#verified by: *needs review*

INSERT INTO customers (customer_id, email_address, password, first_name, last_name)
VALUES (NULL, 'rick@raven.com', '', 'Rick', 'Raven');

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #9
#submitted by: Laura
#updated by:
#verified by: *needs review*

UPDATE customers
   SET password = 'reset'
 LIMIT 100;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #10
#submitted by: Laura
#updated by:
#verified by: *needs review*

#re-run the entire create_my_guitar_shop.sql script to restore the data in the database

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 5                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 5; Exercise #1
#submitted by: Laura
#updated by:
#verified by: *needs review*

SELECT count(*), sum(tax_amount)
  FROM orders;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #2
#submitted by: Jared
#updated by:
#verified by: Laura --looks good, do we want to give the aggregated fields a title?

SELECT c.category_name, count(p.product_id), max(p.list_price)
FROM categories c JOIN products p
ON c.category_id = p.category_id
GROUP BY c.category_name
ORDER BY count(p.product_id) DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #3
#submitted by: Jared
#updated by:
#verified by: Laura - just small format difference; see below

SELECT c.email_address, 
(sum(oi.item_price) * oi.quantity) AS total_price, 
(sum(oi.discount_amount) * oi.quantity) AS total_discount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY o.customer_id
ORDER BY total_price DESC;

SELECT c.email_address
     , SUM(oi.item_price) * oi.quantity      AS item_price_total
     , SUM(oi.discount_amount) * oi.quantity AS item_discount_total
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
 GROUP BY c.customer_id
 ORDER BY item_price_total DESC; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #4
#submitted by: Jared
#updated by:
#verified by: Laura -- just small format differences, see below

SELECT c.email_address, 
count(o.order_id) AS number_of_orders, 
((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY o.customer_id
HAVING count(o.order_id) > 1
ORDER BY total_amount DESC;

SELECT c.email_address
     , COUNT(o.order_id)   AS count_of_orders
     , ((oi.item_price - oi.discount_amount)) * oi.quantity  AS total_order_amount
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
 GROUP BY c.customer_id    
HAVING COUNT(o.order_id) > 1
 ORDER BY total_order_amount DESC; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #5
#submitted by: Jared
#updated by:
#verified by: Laura -- our answers show very different results, I have a line for customers with more than one order

/*4.	
Write a SELECT statement that returns one row for each customer that has orders with these columns:
The email_address column from the Customers table
A count of the number of orders
The total amount for each order (Hint: First, subtract the discount amount from the price. Then, multiply by the quantity.)
Return only those rows where the customer has more than 1 order.
Sort the result set in descending sequence by the sum of the line item amounts.
*/

SELECT c.email_address, 
count(o.order_id) AS number_of_orders, 
((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
where oi.item_price > 400
GROUP BY o.customer_id
ORDER BY total_amount DESC;

SELECT c.email_address
     , COUNT(o.order_id)   AS count_of_orders
     , ((oi.item_price - oi.discount_amount)) * oi.quantity  AS total_order_amount
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
   AND oi.item_price > 400
 GROUP BY c.customer_id    
HAVING COUNT(o.order_id) > 1
 ORDER BY total_order_amount DESC;  

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #6
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT p.product_name, 
SUM((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM products p JOIN order_items oi
ON p.product_id = oi.product_id
GROUP BY p.product_name WITH ROLLUP;

SELECT p.product_name
     , SUM(((oi.item_price - oi.discount_amount)) * oi.quantity)  AS total_order_amount
  FROM products p
  JOIN order_items oi
    ON oi.product_id = p.product_id
 GROUP BY p.product_name WITH ROLLUP; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #7
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.email_address, count(oi.order_id) AS number_of_products
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY c.email_address
HAVING number_of_products > 1
ORDER BY c.email_address ASC;

 SELECT c.email_address
      , COUNT(oi.product_id)  AS distinct_products
   FROM customers c
   JOIN orderS o
     ON o.customer_id = c.customer_id
   JOIN order_items oi
     ON oi.order_id = o.order_id
  GROUP BY c.email_address
  HAVING distinct_products > 1
  ORDER BY c.email_address ASC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #8
#submitted by: Jared
#updated by:
#verified by: Laura --on this one we will need to decide on the verbiage that comes out of the IF/GROUPING statements
#                     we are also off on our totals, somehow mine brings back 2 Gibson Les Paul and yours brings back 3

SELECT IF(GROUPING(c.category_name) = 1, "All Category Names", c.category_name) as category_name, 
IF(GROUPING(p.product_name) = 1, "All Product Names", p.product_name) as product_name,
sum(oi.quantity) AS total_quantity
FROM categories c JOIN products p
ON c.category_id = p.category_id
JOIN order_items oi
ON p.product_id = oi.product_id
GROUP BY c.category_name, p.product_name WITH ROLLUP;
 
SELECT IF(GROUPING(c.category_name) = 1,'GRAND TOTAL', c.category_name)  AS category_name
     , IF(GROUPING(p.product_name) = 1, 'SUMMARY ROW', p.product_name)   AS product_name
     , COUNT(oi.product_id)  AS product_quantity
  FROM products p
  JOIN categories c
    ON c.category_id = p.category_id
  JOIN order_items oi
    ON oi.product_id = p.product_id
 GROUP BY c.category_name, p.product_name WITH ROLLUP;  

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #9
#submitted by: Laura
#updated by:
#verified by: *needs review*

SELECT oi.order_id
     , ((oi.item_price - oi.discount_amount)) * oi.quantity  AS total_item_amount
     , SUM(((oi.item_price - oi.discount_amount)) * oi.quantity) OVER (PARTITION BY oi.order_id) AS total_order_amount
  FROM order_items oi;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #10
#submitted by: Laura
#updated by:
#verified by: *needs review* --very confused about what this one is asking for

SELECT oi.order_id
     , ((oi.item_price - oi.discount_amount)) * oi.quantity  AS total_item_amount
     , SUM(((oi.item_price - oi.discount_amount)) * oi.quantity) OVER (PARTITION BY oi.order_id) AS total_order_amount
	 , ROUND(AVG(((oi.item_price - oi.discount_amount)) * oi.quantity) OVER (PARTITION BY oi.order_id),2) AS avg_item_amount     
  FROM order_items oi;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #11
#submitted by: Laura
#updated by:
#verified by: *needs review*  --still working on this one, this is what I have so far.

SELECT o.customer_id
     , o.order_date
     , SUM(((oi.item_price - oi.discount_amount)) * oi.quantity) OVER (PARTITION BY oi.item_id)  AS total_amount_order_item
  FROM orders o
  JOIN order_items oi
    ON oi.order_id = o.order_id
    #need joins to get to customers and research peer group;

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 6                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 6; Exercise #1
#submitted by: Jared
#updated by:
#verified by: Laura - I think this one needs an order by statement

SELECT category_name
FROM categories
WHERE category_id IN(
SELECT category_id 
FROM products);

SELECT c.category_name
  FROM categories c
 WHERE c.category_id IN (SELECT DISTINCT p.category_id FROM products p)
 ORDER BY c.category_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #2
#submitted by: Jared
#updated by:
#verified by: Laura --we need to choose between the HAVING or WHERE clause; return same results

SELECT product_name, list_price
FROM products
HAVING list_price > (
SELECT AVG(list_price) 
FROM products)
ORDER BY list_price DESC;

SELECT p.product_name
     , p.list_price
  FROM products p
 WHERE p.list_price > (SELECT AVG(list_price) FROM products)
 ORDER BY p.list_price DESC; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #3
#submitted by: Jared
#updated by:
#verified by: Laura - slightly different approaches; same results

SELECT category_name
FROM categories
WHERE NOT EXISTS(
SELECT * 
FROM products 
WHERE products.category_id = categories.category_id);

SELECT c.category_name
  FROM categories c
 WHERE NOT EXISTS (SELECT 1
                     FROM products p
		    WHERE p.category_id = c.category_id);

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #4
#submitted by: Jared
#updated by:
#verified by: Laura -- different setups, basically same results. I think your final query might need a title/name
#                      for the MAX(order_total) field and then ORDER BY that field

#Inner Query
SELECT c.email_address, oi.order_id, 
(oi.item_price - oi.discount_amount) AS order_total
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON oi.order_id = o.order_id
GROUP BY email_address, order_id;

#Inner Query - laura
SELECT c.email_address
     , o.order_id
     , ((oi.item_price - oi.discount_amount))  AS total_item_amount
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
 GROUP BY c.email_address, o.order_id; 

#Complete Query
SELECT email_address, MAX(order_total)
FROM (SELECT c.email_address, oi.order_id, 
(oi.item_price - oi.discount_amount) AS order_total
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON oi.order_id = o.order_id
GROUP BY email_address, order_id) as newTable
GROUP BY email_address
ORDER BY order_total DESC;

#Complete Query - Laura
SELECT z.email_address
     , MAX(z.order_amount)  AS largest_order
  FROM (
SELECT c.email_address
     , o.order_id
     , ((oi.item_price - oi.discount_amount))  AS order_amount
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
 GROUP BY c.email_address, o.order_id
       ) z
 GROUP BY z.email_address
 ORDER BY largest_order DESC;
#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #5
#submitted by: Jared
#updated by:
#verified by: Laura - different approaches; same results --we just need to pick one

SELECT product_name, discount_percent
FROM products
WHERE discount_percent IN(
SELECT discount_percent
FROM products
GROUP BY discount_percent
HAVING count(discount_percent) = 1)
ORDER BY product_name;

SELECT p.product_name
     , p.discount_percent
  FROM products p
 WHERE NOT EXISTS(SELECT 1
                    FROM products p2
	           WHERE p2.product_id <> p.product_id
                     AND p2.discount_percent = p.discount_percent)
 ORDER BY p.product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #6
#submitted by: Jared
#updated by:
#verified by: Laura - different approach; same results

SELECT c.email_address, o.order_id, o.order_date
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
WHERE o.order_date = (
SELECT MIN(order_date) 
FROM orders 
WHERE order_date = o.order_date)
GROUP BY c.customer_id
ORDER BY o.order_date, o.order_id;

SELECT c.email_address
     , o.order_id
     , o.order_date
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
 WHERE o.order_date = (SELECT MIN(o2.order_date)
                         FROM orders o2
	                WHERE o2.customer_id = c.customer_id)
 ORDER BY o.order_date, o.order_id;

#------------------------------------------------------------------------
