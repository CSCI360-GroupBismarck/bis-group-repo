#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 2                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 2; Exercise #1
#submitted by: Laura
#updated by:Jared
#verified by: Jared

SELECT product_code, product_name, list_price, discount_percent
  FROM products;
  
SELECT product_code, product_name, list_price, discount_percent
  FROM products
 ORDER BY list_price DESC;  
 
#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #2
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT CONCAT(last_name, ', ', first_name) AS full_name
  FROM customers
 WHERE LEFT(last_name, 1) BETWEEN 'M' and 'Z'
 ORDER BY last_name;
 
#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #3
#submitted by: Laura
#updated by: Laura
#verified by: Jared

 SELECT product_name, list_price, date_added
  FROM products
 WHERE list_price > 500 AND list_price < 2000
 ORDER BY date_added DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #4
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT product_name, list_price, discount_percent
     , ROUND(list_price * (discount_percent/100), 2)               AS discount_amount
     , ROUND(list_price - (list_price * discount_percent/100), 2)  AS discount_price
  FROM products
 ORDER BY discount_price DESC LIMIT 5;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #5
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT item_id, item_price, discount_amount, quantity
     , item_price * quantity       AS price_total
	 , discount_amount * quantity  AS discount_total
     , (item_price - discount_amount) * quantity  AS item_total
  FROM order_items
 WHERE (item_price - discount_amount) * quantity > 500
 ORDER BY item_total DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #6
#submitted by:Laura
#updated by:
#verified by: Jared

SELECT order_id, order_date, ship_date
  FROM orders
 WHERE ship_date IS NULL;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #7
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT NOW() AS today_unformatted,
DATE_FORMAT(NOW(), '%d-%b-%Y')  AS today_formatted; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 2; Exercise #8
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT 100                  AS price
     , .07                  AS tax_rate
     , (100 * .07)          AS tax_amount
     , (100 + (100 * .07))  AS total;

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 3                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 3; Exercise #1
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.category_name, p.product_name, p.list_price
FROM categories c JOIN products p
ON c.category_id = p.category_id
ORDER BY c.category_name, p.product_name ASC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #2
#submitted by: Jared
#updated by: Laura
#verified by: Laura 

 SELECT DISTINCT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
   FROM customers c
   JOIN addresses a
     ON a.customer_id = c.customer_id
  WHERE c.email_address = 'allan.sherwood@yahoo.com';

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #3
#submitted by: Jared
#updated by:
#verified by: Laura 

SELECT c.first_name, c.last_name, a.line1, a.city, a.state, a.zip_code
FROM customers c JOIN addresses a 
ON c.customer_id = a.customer_id
WHERE c.shipping_address_id = a.address_id;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #4
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.last_name, c.first_name, o.order_date, p.product_name, oi.item_price, oi.discount_amount, oi.quantity
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
  JOIN products p
    ON p.product_id = oi.product_id
 ORDER BY c.last_name, o.order_date, p.product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #5
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT a.product_name, a.list_price
FROM products a JOIN products b
ON a.list_price = b.list_price
WHERE NOT a.product_code = b.product_code AND a.list_price = b.list_price
ORDER BY a.product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #6
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.category_name, p.product_id
FROM categories c LEFT JOIN products p
ON c.category_id = p.category_id
WHERE product_id IS NULL;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 3; Exercise #7
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT 'SHIPPED' AS ship_status
     , order_id
     , order_date
  FROM orders
 WHERE ship_date is not null
 UNION
 SELECT 'NOT SHIPPED' AS ship_status
     , order_id
     , order_date
  FROM orders
 WHERE ship_date is null;

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 4                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 4; Exercise #1
#submitted by: Laura
#updated by:
#verified by: Jared           

INSERT INTO categories VALUES (NULL, 'Brass');

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #2
#submitted by: Laura
#updated by:
#verified by: Jared

UPDATE categories
  SET category_name = 'Woodwinds'
WHERE category_id = 5;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #3
#submitted by: Laura
#updated by: Jared
#verified by: Jared

DELETE FROM categories WHERE category_id = 5;
 
#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #4
#submitted by: Laura
#updated by:
#verified by: Jared

INSERT INTO products(product_id, category_id, product_code, product_name, description, list_price, discount_percent, date_added)
VALUES(DEFAULT, 4, "dgx_640", "Yamaha DGX 640 88-Key Digital Piano", "Long description to come.", 799.99, 0, now());

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #5
#submitted by: Laura
#updated by:
#verified by: Jared

UPDATE products
   SET discount_percent = 35
 WHERE product_id = 11;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #6
#submitted by: Laura
#updated by:
#verified by: Jared

DELETE FROM products WHERE category_id = 4;
DELETE FROM categories WHERE category_id = 4;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #7
#submitted by: Laura
#updated by: Laura
#verified by: Jared

INSERT INTO customers(email_address, password, first_name, last_name)
VALUES ('rick@raven.com', '', 'Rick', 'Raven');

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #8
#submitted by: Laura
#updated by: Jared
#verified by: Jared

UPDATE customers
   SET password = 'secret'
 WHERE email_address = 'rick@raven.com';

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #9
#submitted by: Laura
#updated by:
#verified by: Jared

UPDATE customers
   SET password = 'reset'
 LIMIT 100;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 4; Exercise #10
#submitted by: Laura
#updated by:
#verified by: Jared

#re-run the entire create_my_guitar_shop.sql script to restore the data in the database

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 5                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 5; Exercise #1
#submitted by: Laura
#updated by: Laura
#verified by: Jared

SELECT count(order_id), sum(tax_amount)
FROM orders;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #2
#submitted by: Jared
#updated by: Laura
#verified by: Laura

SELECT c.category_name
     , count(p.product_id) AS product_count
     , max(p.list_price)   AS highest_list_price
FROM categories c JOIN products p
ON c.category_id = p.category_id
GROUP BY c.category_name
ORDER BY product_count DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #3
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.email_address, 
(sum(oi.item_price) * oi.quantity) AS total_price, 
(sum(oi.discount_amount) * oi.quantity) AS total_discount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY o.customer_id
ORDER BY total_price DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #4
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.email_address, 
count(o.order_id) AS number_of_orders, 
((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY o.customer_id
HAVING count(o.order_id) > 1
ORDER BY total_amount DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #5
#submitted by: Jared
#updated by: Laura
#verified by: Laura

#Displaying all orders with item_price value greater than $400
SELECT c.email_address, 
count(o.order_id) AS number_of_orders, 
((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
where oi.item_price > 400
GROUP BY o.customer_id
ORDER BY total_amount DESC;

#Displaying only multiple orders with item_price values greater than $400
SELECT c.email_address
     , COUNT(o.order_id)   AS count_of_orders
     , ((oi.item_price - oi.discount_amount)) * oi.quantity  AS total_order_amount
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
  JOIN order_items oi
    ON oi.order_id = o.order_id
   AND oi.item_price > 400
 GROUP BY c.customer_id    
HAVING COUNT(o.order_id) > 1
 ORDER BY total_order_amount DESC;  

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #6
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT p.product_name, 
SUM((oi.item_price - oi.discount_amount) * oi.quantity) AS total_amount
FROM products p JOIN order_items oi
ON p.product_id = oi.product_id
GROUP BY p.product_name WITH ROLLUP; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #7
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.email_address, count(oi.order_id) AS number_of_products
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON o.order_id = oi.order_id
GROUP BY c.email_address
HAVING number_of_products > 1
ORDER BY c.email_address ASC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #8
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT IF(GROUPING(c.category_name) = 1,'GRAND TOTAL', c.category_name)  AS category_name
     , IF(GROUPING(p.product_name) = 1, 'SUMMARY ROW', p.product_name)   AS product_name
     , SUM(oi.quantity)  AS total_quantity
  FROM products p
  JOIN categories c
    ON c.category_id = p.category_id
  JOIN order_items oi
    ON oi.product_id = p.product_id
 GROUP BY c.category_name, p.product_name WITH ROLLUP;  

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #9
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT oi.order_id
     , ((oi.item_price - oi.discount_amount)) * oi.quantity  AS total_item_amount
     , SUM((oi.item_price - oi.discount_amount) * oi.quantity) OVER (PARTITION BY oi.order_id) AS total_order_amount
  FROM order_items oi
 ORDER BY oi.order_id;  

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #10
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT oi.order_id
     , (oi.item_price - oi.discount_amount) * oi.quantity  AS total_item_amount
     , SUM((oi.item_price - oi.discount_amount) * oi.quantity) OVER(PARTITION BY oi.order_id ORDER BY (oi.item_price - oi.discount_amount) * oi.quantity) AS total_order_amount
     , ROUND(AVG((oi.item_price - oi.discount_amount) * oi.quantity) OVER(PARTITION BY oi.order_id),2) AS avg_order_amount     
  FROM order_items oi
 ORDER BY oi.order_id;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 5; Exercise #11
#submitted by: Laura
#updated by:
#verified by: Jared

SELECT o.customer_id
     , o.order_date
     , (oi.item_price - oi.discount_amount) * oi.quantity AS item_total
     , SUM((oi.item_price - oi.discount_amount) * oi.quantity) OVER(PARTITION BY o.customer_id)  AS customer_total
     , SUM((oi.item_price - oi.discount_amount) * oi.quantity) OVER(PARTITION BY o.customer_id ORDER BY o.order_date) AS customer_total_by_date
  FROM orders o
  JOIN order_items oi
    ON o.order_id = oi.order_id;

#------------------------------------------------------------------------

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#                                     Part 6                                      #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#-----------------------------------------------------Part 6; Exercise #1
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT category_name
FROM categories
WHERE category_id IN(
SELECT category_id 
FROM products)
ORDER BY category_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #2
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT p.product_name
     , p.list_price
  FROM products p
 WHERE p.list_price > (SELECT AVG(list_price) FROM products)
 ORDER BY p.list_price DESC; 

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #3
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT category_name
FROM categories
WHERE NOT EXISTS(
SELECT * 
FROM products 
WHERE products.category_id = categories.category_id);

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #4
#submitted by: Jared
#updated by:
#verified by: Laura

#Inner Query
SELECT c.email_address, oi.order_id, 
(oi.item_price - oi.discount_amount) AS order_total
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON oi.order_id = o.order_id
GROUP BY email_address, order_id;

#Complete Query
SELECT email_address, MAX(order_total)
FROM (SELECT c.email_address, oi.order_id, 
(oi.item_price - oi.discount_amount) AS order_total
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi
ON oi.order_id = o.order_id
GROUP BY email_address, order_id) as newTable
GROUP BY email_address
ORDER BY MAX(order_total) DESC;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #5
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT product_name, discount_percent
FROM products
WHERE discount_percent IN(
SELECT discount_percent
FROM products
GROUP BY discount_percent
HAVING count(discount_percent) = 1)
ORDER BY product_name;

#------------------------------------------------------------------------

#-----------------------------------------------------Part 6; Exercise #6
#submitted by: Jared
#updated by:
#verified by: Laura

SELECT c.email_address
     , o.order_id
     , o.order_date
  FROM customers c
  JOIN orders o
    ON o.customer_id = c.customer_id
 WHERE o.order_date = (SELECT MIN(o2.order_date)
                         FROM orders o2
	                WHERE o2.customer_id = c.customer_id)
 ORDER BY o.order_date, o.order_id;

#------------------------------------------------------------------------
